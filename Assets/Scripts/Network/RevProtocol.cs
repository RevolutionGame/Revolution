// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RevProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from RevProtocol.proto</summary>
public static partial class RevProtocolReflection {

  #region Descriptor
  /// <summary>File descriptor for RevProtocol.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RevProtocolReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFSZXZQcm90b2NvbC5wcm90byJ/CgxQbGF5ZXJBY3Rpb24SEQoJcGxheWVy",
          "X2lkGAEgASgNEiAKC2FjdGlvbl90eXBlGAIgASgOMgsuQWN0aW9uVHlwZRIX",
          "Cg1wbGF5ZXJfdGFyZ2V0GAMgASgNSAASFwoNb2JqZWN0X3RhcmdldBgEIAEo",
          "DUgAQggKBnRhcmdldCJZCgpQbGF5ZXJJbmZvEgoKAmlkGAEgASgNEgwKBG5h",
          "bWUYAiABKAkSDQoFc2NvcmUYAyABKA0SDwoHc2hpcF9pZBgEIAEoDRIRCgl3",
          "ZWFwb25faWQYBSABKA0iNQoJTG9iYnlJbmZvEgoKAmlkGAEgASgNEhwKB3Bs",
          "YXllcnMYAiADKAsyCy5QbGF5ZXJJbmZvIk0KDlBsYXllckxvY2F0aW9uEgoK",
          "AmlkGAEgASgNEg4KBmhlYWx0aBgCIAEoDRIJCgF4GAMgASgCEgkKAXkYBCAB",
          "KAISCQoBchgFIAEoAiJ2Cg5PYmplY3RMb2NhdGlvbhIRCglvYmplY3RfaWQY",
          "ASABKA0SIAoLb2JqZWN0X3R5cGUYAiABKA4yCy5PYmplY3RUeXBlEgkKAXgY",
          "AyABKAISCQoBeRgEIAEoAhIJCgFyGAUgASgCEg4KBmhlYWx0aBgGIAEoDSIt",
          "CglXb3JsZEluZm8SIAoHb2JqZWN0cxgBIAMoCzIPLk9iamVjdExvY2F0aW9u",
          "IuoBCgZQYWNrZXQSHAoJYm9keV90eXBlGAEgASgOMgkuQm9keVR5cGUSIgoL",
          "cGxheWVyX2luZm8YAiABKAsyCy5QbGF5ZXJJbmZvSAASIAoKbG9iYnlfaW5m",
          "bxgDIAEoCzIKLkxvYmJ5SW5mb0gAEioKD3BsYXllcl9sb2NhdGlvbhgEIAEo",
          "CzIPLlBsYXllckxvY2F0aW9uSAASIAoKd29ybGRfaW5mbxgFIAEoCzIKLldv",
          "cmxkSW5mb0gAEiYKDXBsYXllcl9hY3Rpb24YBiABKAsyDS5QbGF5ZXJBY3Rp",
          "b25IAEIGCgRib2R5KtQBCghCb2R5VHlwZRIICgROT05FEAASEAoMUkVRVUVT",
          "VF9TTE9UEAESDwoLUExBWUVSX0pPSU4QAhIVChFQTEFZRVJfRElTQ09OTkVD",
          "VBADEg4KCkxPQkJZX0lORk8QBBIQCgxQTEFZRVJfUkVBRFkQBRIOCgpXT1JM",
          "RF9JTkZPEAYSDgoKR0FNRV9TVEFSVBAHEgwKCEdBTUVfRU5EEAgSEwoPUExB",
          "WUVSX0xPQ0FUSU9OEAkSEQoNUExBWUVSX0FDVElPThAKEgwKCFJFQURZX1VQ",
          "EAsqXgoKQWN0aW9uVHlwZRIMCghGSVJFX0dVThAAEhAKDERFU1BBV05fU0hJ",
          "UBABEg4KClNQQVdOX1NISVAQAhIQCgxISVRfQVNURVJPSUQQAxIOCgpISVRf",
          "UExBWUVSEAQqRwoKT2JqZWN0VHlwZRIQCgxBU1RFUk9JRF9CSUcQABITCg9B",
          "U1RFUk9JRF9NRURJVU0QARISCg5BU1RFUk9JRF9TTUFMTBACYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::BodyType), typeof(global::ActionType), typeof(global::ObjectType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerAction), global::PlayerAction.Parser, new[]{ "PlayerId", "ActionType", "PlayerTarget", "ObjectTarget" }, new[]{ "Target" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "Id", "Name", "Score", "ShipId", "WeaponId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LobbyInfo), global::LobbyInfo.Parser, new[]{ "Id", "Players" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerLocation), global::PlayerLocation.Parser, new[]{ "Id", "Health", "X", "Y", "R" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectLocation), global::ObjectLocation.Parser, new[]{ "ObjectId", "ObjectType", "X", "Y", "R", "Health" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WorldInfo), global::WorldInfo.Parser, new[]{ "Objects" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Packet), global::Packet.Parser, new[]{ "BodyType", "PlayerInfo", "LobbyInfo", "PlayerLocation", "WorldInfo", "PlayerAction" }, new[]{ "Body" }, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum BodyType {
  /// <summary>
  ///Used for Ping/Pong
  /// </summary>
  [pbr::OriginalName("NONE")] None = 0,
  /// <summary>
  ///Used to get a slot in the Lobby
  /// </summary>
  [pbr::OriginalName("REQUEST_SLOT")] RequestSlot = 1,
  /// <summary>
  ///Sent to all players when a new player joins
  /// </summary>
  [pbr::OriginalName("PLAYER_JOIN")] PlayerJoin = 2,
  /// <summary>
  ///Sent to all players when a player timesout
  /// </summary>
  [pbr::OriginalName("PLAYER_DISCONNECT")] PlayerDisconnect = 3,
  /// <summary>
  ///Sent after a request for a slot successeds 
  /// </summary>
  [pbr::OriginalName("LOBBY_INFO")] LobbyInfo = 4,
  [pbr::OriginalName("PLAYER_READY")] PlayerReady = 5,
  [pbr::OriginalName("WORLD_INFO")] WorldInfo = 6,
  [pbr::OriginalName("GAME_START")] GameStart = 7,
  [pbr::OriginalName("GAME_END")] GameEnd = 8,
  [pbr::OriginalName("PLAYER_LOCATION")] PlayerLocation = 9,
  [pbr::OriginalName("PLAYER_ACTION")] PlayerAction = 10,
  [pbr::OriginalName("READY_UP")] ReadyUp = 11,
}

public enum ActionType {
  [pbr::OriginalName("FIRE_GUN")] FireGun = 0,
  [pbr::OriginalName("DESPAWN_SHIP")] DespawnShip = 1,
  [pbr::OriginalName("SPAWN_SHIP")] SpawnShip = 2,
  [pbr::OriginalName("HIT_ASTEROID")] HitAsteroid = 3,
  [pbr::OriginalName("HIT_PLAYER")] HitPlayer = 4,
}

public enum ObjectType {
  [pbr::OriginalName("ASTEROID_BIG")] AsteroidBig = 0,
  [pbr::OriginalName("ASTEROID_MEDIUM")] AsteroidMedium = 1,
  [pbr::OriginalName("ASTEROID_SMALL")] AsteroidSmall = 2,
}

#endregion

#region Messages
public sealed partial class PlayerAction : pb::IMessage<PlayerAction> {
  private static readonly pb::MessageParser<PlayerAction> _parser = new pb::MessageParser<PlayerAction>(() => new PlayerAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RevProtocolReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerAction(PlayerAction other) : this() {
    playerId_ = other.playerId_;
    actionType_ = other.actionType_;
    switch (other.TargetCase) {
      case TargetOneofCase.PlayerTarget:
        PlayerTarget = other.PlayerTarget;
        break;
      case TargetOneofCase.ObjectTarget:
        ObjectTarget = other.ObjectTarget;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerAction Clone() {
    return new PlayerAction(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "action_type" field.</summary>
  public const int ActionTypeFieldNumber = 2;
  private global::ActionType actionType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActionType ActionType {
    get { return actionType_; }
    set {
      actionType_ = value;
    }
  }

  /// <summary>Field number for the "player_target" field.</summary>
  public const int PlayerTargetFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerTarget {
    get { return targetCase_ == TargetOneofCase.PlayerTarget ? (uint) target_ : 0; }
    set {
      target_ = value;
      targetCase_ = TargetOneofCase.PlayerTarget;
    }
  }

  /// <summary>Field number for the "object_target" field.</summary>
  public const int ObjectTargetFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ObjectTarget {
    get { return targetCase_ == TargetOneofCase.ObjectTarget ? (uint) target_ : 0; }
    set {
      target_ = value;
      targetCase_ = TargetOneofCase.ObjectTarget;
    }
  }

  private object target_;
  /// <summary>Enum of possible cases for the "target" oneof.</summary>
  public enum TargetOneofCase {
    None = 0,
    PlayerTarget = 3,
    ObjectTarget = 4,
  }
  private TargetOneofCase targetCase_ = TargetOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TargetOneofCase TargetCase {
    get { return targetCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTarget() {
    targetCase_ = TargetOneofCase.None;
    target_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (ActionType != other.ActionType) return false;
    if (PlayerTarget != other.PlayerTarget) return false;
    if (ObjectTarget != other.ObjectTarget) return false;
    if (TargetCase != other.TargetCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (ActionType != 0) hash ^= ActionType.GetHashCode();
    if (targetCase_ == TargetOneofCase.PlayerTarget) hash ^= PlayerTarget.GetHashCode();
    if (targetCase_ == TargetOneofCase.ObjectTarget) hash ^= ObjectTarget.GetHashCode();
    hash ^= (int) targetCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (ActionType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ActionType);
    }
    if (targetCase_ == TargetOneofCase.PlayerTarget) {
      output.WriteRawTag(24);
      output.WriteUInt32(PlayerTarget);
    }
    if (targetCase_ == TargetOneofCase.ObjectTarget) {
      output.WriteRawTag(32);
      output.WriteUInt32(ObjectTarget);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (ActionType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
    }
    if (targetCase_ == TargetOneofCase.PlayerTarget) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerTarget);
    }
    if (targetCase_ == TargetOneofCase.ObjectTarget) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectTarget);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerAction other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.ActionType != 0) {
      ActionType = other.ActionType;
    }
    switch (other.TargetCase) {
      case TargetOneofCase.PlayerTarget:
        PlayerTarget = other.PlayerTarget;
        break;
      case TargetOneofCase.ObjectTarget:
        ObjectTarget = other.ObjectTarget;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          actionType_ = (global::ActionType) input.ReadEnum();
          break;
        }
        case 24: {
          PlayerTarget = input.ReadUInt32();
          break;
        }
        case 32: {
          ObjectTarget = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RevProtocolReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    score_ = other.score_;
    shipId_ = other.shipId_;
    weaponId_ = other.weaponId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 3;
  private uint score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "ship_id" field.</summary>
  public const int ShipIdFieldNumber = 4;
  private uint shipId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ShipId {
    get { return shipId_; }
    set {
      shipId_ = value;
    }
  }

  /// <summary>Field number for the "weapon_id" field.</summary>
  public const int WeaponIdFieldNumber = 5;
  private uint weaponId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WeaponId {
    get { return weaponId_; }
    set {
      weaponId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Score != other.Score) return false;
    if (ShipId != other.ShipId) return false;
    if (WeaponId != other.WeaponId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (ShipId != 0) hash ^= ShipId.GetHashCode();
    if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Score != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Score);
    }
    if (ShipId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ShipId);
    }
    if (WeaponId != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(WeaponId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
    }
    if (ShipId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShipId);
    }
    if (WeaponId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.ShipId != 0) {
      ShipId = other.ShipId;
    }
    if (other.WeaponId != 0) {
      WeaponId = other.WeaponId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Score = input.ReadUInt32();
          break;
        }
        case 32: {
          ShipId = input.ReadUInt32();
          break;
        }
        case 40: {
          WeaponId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LobbyInfo : pb::IMessage<LobbyInfo> {
  private static readonly pb::MessageParser<LobbyInfo> _parser = new pb::MessageParser<LobbyInfo>(() => new LobbyInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LobbyInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RevProtocolReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LobbyInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LobbyInfo(LobbyInfo other) : this() {
    id_ = other.id_;
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LobbyInfo Clone() {
    return new LobbyInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_players_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> players_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LobbyInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LobbyInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LobbyInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 18: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerLocation : pb::IMessage<PlayerLocation> {
  private static readonly pb::MessageParser<PlayerLocation> _parser = new pb::MessageParser<PlayerLocation>(() => new PlayerLocation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerLocation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RevProtocolReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerLocation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerLocation(PlayerLocation other) : this() {
    id_ = other.id_;
    health_ = other.health_;
    x_ = other.x_;
    y_ = other.y_;
    r_ = other.r_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerLocation Clone() {
    return new PlayerLocation(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "health" field.</summary>
  public const int HealthFieldNumber = 2;
  private uint health_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Health {
    get { return health_; }
    set {
      health_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 3;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 4;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "r" field.</summary>
  public const int RFieldNumber = 5;
  private float r_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float R {
    get { return r_; }
    set {
      r_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerLocation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerLocation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Health != other.Health) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Health != 0) hash ^= Health.GetHashCode();
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    if (Health != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Health);
    }
    if (X != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Y);
    }
    if (R != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(R);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (Health != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Health);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (R != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerLocation other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Health != 0) {
      Health = other.Health;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.R != 0F) {
      R = other.R;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 16: {
          Health = input.ReadUInt32();
          break;
        }
        case 29: {
          X = input.ReadFloat();
          break;
        }
        case 37: {
          Y = input.ReadFloat();
          break;
        }
        case 45: {
          R = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class ObjectLocation : pb::IMessage<ObjectLocation> {
  private static readonly pb::MessageParser<ObjectLocation> _parser = new pb::MessageParser<ObjectLocation>(() => new ObjectLocation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectLocation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RevProtocolReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectLocation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectLocation(ObjectLocation other) : this() {
    objectId_ = other.objectId_;
    objectType_ = other.objectType_;
    x_ = other.x_;
    y_ = other.y_;
    r_ = other.r_;
    health_ = other.health_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectLocation Clone() {
    return new ObjectLocation(this);
  }

  /// <summary>Field number for the "object_id" field.</summary>
  public const int ObjectIdFieldNumber = 1;
  private uint objectId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ObjectId {
    get { return objectId_; }
    set {
      objectId_ = value;
    }
  }

  /// <summary>Field number for the "object_type" field.</summary>
  public const int ObjectTypeFieldNumber = 2;
  private global::ObjectType objectType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ObjectType ObjectType {
    get { return objectType_; }
    set {
      objectType_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 3;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 4;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "r" field.</summary>
  public const int RFieldNumber = 5;
  private float r_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float R {
    get { return r_; }
    set {
      r_ = value;
    }
  }

  /// <summary>Field number for the "health" field.</summary>
  public const int HealthFieldNumber = 6;
  private uint health_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Health {
    get { return health_; }
    set {
      health_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectLocation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectLocation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObjectId != other.ObjectId) return false;
    if (ObjectType != other.ObjectType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
    if (Health != other.Health) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
    if (ObjectType != 0) hash ^= ObjectType.GetHashCode();
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
    if (Health != 0) hash ^= Health.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ObjectId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ObjectId);
    }
    if (ObjectType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ObjectType);
    }
    if (X != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Y);
    }
    if (R != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(R);
    }
    if (Health != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Health);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ObjectId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
    }
    if (ObjectType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ObjectType);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (R != 0F) {
      size += 1 + 4;
    }
    if (Health != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Health);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectLocation other) {
    if (other == null) {
      return;
    }
    if (other.ObjectId != 0) {
      ObjectId = other.ObjectId;
    }
    if (other.ObjectType != 0) {
      ObjectType = other.ObjectType;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.R != 0F) {
      R = other.R;
    }
    if (other.Health != 0) {
      Health = other.Health;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ObjectId = input.ReadUInt32();
          break;
        }
        case 16: {
          objectType_ = (global::ObjectType) input.ReadEnum();
          break;
        }
        case 29: {
          X = input.ReadFloat();
          break;
        }
        case 37: {
          Y = input.ReadFloat();
          break;
        }
        case 45: {
          R = input.ReadFloat();
          break;
        }
        case 48: {
          Health = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class WorldInfo : pb::IMessage<WorldInfo> {
  private static readonly pb::MessageParser<WorldInfo> _parser = new pb::MessageParser<WorldInfo>(() => new WorldInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WorldInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RevProtocolReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WorldInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WorldInfo(WorldInfo other) : this() {
    objects_ = other.objects_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WorldInfo Clone() {
    return new WorldInfo(this);
  }

  /// <summary>Field number for the "objects" field.</summary>
  public const int ObjectsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ObjectLocation> _repeated_objects_codec
      = pb::FieldCodec.ForMessage(10, global::ObjectLocation.Parser);
  private readonly pbc::RepeatedField<global::ObjectLocation> objects_ = new pbc::RepeatedField<global::ObjectLocation>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ObjectLocation> Objects {
    get { return objects_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WorldInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WorldInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!objects_.Equals(other.objects_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= objects_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    objects_.WriteTo(output, _repeated_objects_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += objects_.CalculateSize(_repeated_objects_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WorldInfo other) {
    if (other == null) {
      return;
    }
    objects_.Add(other.objects_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          objects_.AddEntriesFrom(input, _repeated_objects_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Packet : pb::IMessage<Packet> {
  private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Packet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RevProtocolReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Packet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Packet(Packet other) : this() {
    bodyType_ = other.bodyType_;
    switch (other.BodyCase) {
      case BodyOneofCase.PlayerInfo:
        PlayerInfo = other.PlayerInfo.Clone();
        break;
      case BodyOneofCase.LobbyInfo:
        LobbyInfo = other.LobbyInfo.Clone();
        break;
      case BodyOneofCase.PlayerLocation:
        PlayerLocation = other.PlayerLocation.Clone();
        break;
      case BodyOneofCase.WorldInfo:
        WorldInfo = other.WorldInfo.Clone();
        break;
      case BodyOneofCase.PlayerAction:
        PlayerAction = other.PlayerAction.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Packet Clone() {
    return new Packet(this);
  }

  /// <summary>Field number for the "body_type" field.</summary>
  public const int BodyTypeFieldNumber = 1;
  private global::BodyType bodyType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BodyType BodyType {
    get { return bodyType_; }
    set {
      bodyType_ = value;
    }
  }

  /// <summary>Field number for the "player_info" field.</summary>
  public const int PlayerInfoFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerInfo PlayerInfo {
    get { return bodyCase_ == BodyOneofCase.PlayerInfo ? (global::PlayerInfo) body_ : null; }
    set {
      body_ = value;
      bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.PlayerInfo;
    }
  }

  /// <summary>Field number for the "lobby_info" field.</summary>
  public const int LobbyInfoFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LobbyInfo LobbyInfo {
    get { return bodyCase_ == BodyOneofCase.LobbyInfo ? (global::LobbyInfo) body_ : null; }
    set {
      body_ = value;
      bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.LobbyInfo;
    }
  }

  /// <summary>Field number for the "player_location" field.</summary>
  public const int PlayerLocationFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerLocation PlayerLocation {
    get { return bodyCase_ == BodyOneofCase.PlayerLocation ? (global::PlayerLocation) body_ : null; }
    set {
      body_ = value;
      bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.PlayerLocation;
    }
  }

  /// <summary>Field number for the "world_info" field.</summary>
  public const int WorldInfoFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::WorldInfo WorldInfo {
    get { return bodyCase_ == BodyOneofCase.WorldInfo ? (global::WorldInfo) body_ : null; }
    set {
      body_ = value;
      bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.WorldInfo;
    }
  }

  /// <summary>Field number for the "player_action" field.</summary>
  public const int PlayerActionFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerAction PlayerAction {
    get { return bodyCase_ == BodyOneofCase.PlayerAction ? (global::PlayerAction) body_ : null; }
    set {
      body_ = value;
      bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.PlayerAction;
    }
  }

  private object body_;
  /// <summary>Enum of possible cases for the "body" oneof.</summary>
  public enum BodyOneofCase {
    None = 0,
    PlayerInfo = 2,
    LobbyInfo = 3,
    PlayerLocation = 4,
    WorldInfo = 5,
    PlayerAction = 6,
  }
  private BodyOneofCase bodyCase_ = BodyOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BodyOneofCase BodyCase {
    get { return bodyCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBody() {
    bodyCase_ = BodyOneofCase.None;
    body_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Packet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Packet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BodyType != other.BodyType) return false;
    if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
    if (!object.Equals(LobbyInfo, other.LobbyInfo)) return false;
    if (!object.Equals(PlayerLocation, other.PlayerLocation)) return false;
    if (!object.Equals(WorldInfo, other.WorldInfo)) return false;
    if (!object.Equals(PlayerAction, other.PlayerAction)) return false;
    if (BodyCase != other.BodyCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BodyType != 0) hash ^= BodyType.GetHashCode();
    if (bodyCase_ == BodyOneofCase.PlayerInfo) hash ^= PlayerInfo.GetHashCode();
    if (bodyCase_ == BodyOneofCase.LobbyInfo) hash ^= LobbyInfo.GetHashCode();
    if (bodyCase_ == BodyOneofCase.PlayerLocation) hash ^= PlayerLocation.GetHashCode();
    if (bodyCase_ == BodyOneofCase.WorldInfo) hash ^= WorldInfo.GetHashCode();
    if (bodyCase_ == BodyOneofCase.PlayerAction) hash ^= PlayerAction.GetHashCode();
    hash ^= (int) bodyCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BodyType != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) BodyType);
    }
    if (bodyCase_ == BodyOneofCase.PlayerInfo) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerInfo);
    }
    if (bodyCase_ == BodyOneofCase.LobbyInfo) {
      output.WriteRawTag(26);
      output.WriteMessage(LobbyInfo);
    }
    if (bodyCase_ == BodyOneofCase.PlayerLocation) {
      output.WriteRawTag(34);
      output.WriteMessage(PlayerLocation);
    }
    if (bodyCase_ == BodyOneofCase.WorldInfo) {
      output.WriteRawTag(42);
      output.WriteMessage(WorldInfo);
    }
    if (bodyCase_ == BodyOneofCase.PlayerAction) {
      output.WriteRawTag(50);
      output.WriteMessage(PlayerAction);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BodyType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BodyType);
    }
    if (bodyCase_ == BodyOneofCase.PlayerInfo) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
    }
    if (bodyCase_ == BodyOneofCase.LobbyInfo) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LobbyInfo);
    }
    if (bodyCase_ == BodyOneofCase.PlayerLocation) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerLocation);
    }
    if (bodyCase_ == BodyOneofCase.WorldInfo) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldInfo);
    }
    if (bodyCase_ == BodyOneofCase.PlayerAction) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerAction);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Packet other) {
    if (other == null) {
      return;
    }
    if (other.BodyType != 0) {
      BodyType = other.BodyType;
    }
    switch (other.BodyCase) {
      case BodyOneofCase.PlayerInfo:
        if (PlayerInfo == null) {
          PlayerInfo = new global::PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
        break;
      case BodyOneofCase.LobbyInfo:
        if (LobbyInfo == null) {
          LobbyInfo = new global::LobbyInfo();
        }
        LobbyInfo.MergeFrom(other.LobbyInfo);
        break;
      case BodyOneofCase.PlayerLocation:
        if (PlayerLocation == null) {
          PlayerLocation = new global::PlayerLocation();
        }
        PlayerLocation.MergeFrom(other.PlayerLocation);
        break;
      case BodyOneofCase.WorldInfo:
        if (WorldInfo == null) {
          WorldInfo = new global::WorldInfo();
        }
        WorldInfo.MergeFrom(other.WorldInfo);
        break;
      case BodyOneofCase.PlayerAction:
        if (PlayerAction == null) {
          PlayerAction = new global::PlayerAction();
        }
        PlayerAction.MergeFrom(other.PlayerAction);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          bodyType_ = (global::BodyType) input.ReadEnum();
          break;
        }
        case 18: {
          global::PlayerInfo subBuilder = new global::PlayerInfo();
          if (bodyCase_ == BodyOneofCase.PlayerInfo) {
            subBuilder.MergeFrom(PlayerInfo);
          }
          input.ReadMessage(subBuilder);
          PlayerInfo = subBuilder;
          break;
        }
        case 26: {
          global::LobbyInfo subBuilder = new global::LobbyInfo();
          if (bodyCase_ == BodyOneofCase.LobbyInfo) {
            subBuilder.MergeFrom(LobbyInfo);
          }
          input.ReadMessage(subBuilder);
          LobbyInfo = subBuilder;
          break;
        }
        case 34: {
          global::PlayerLocation subBuilder = new global::PlayerLocation();
          if (bodyCase_ == BodyOneofCase.PlayerLocation) {
            subBuilder.MergeFrom(PlayerLocation);
          }
          input.ReadMessage(subBuilder);
          PlayerLocation = subBuilder;
          break;
        }
        case 42: {
          global::WorldInfo subBuilder = new global::WorldInfo();
          if (bodyCase_ == BodyOneofCase.WorldInfo) {
            subBuilder.MergeFrom(WorldInfo);
          }
          input.ReadMessage(subBuilder);
          WorldInfo = subBuilder;
          break;
        }
        case 50: {
          global::PlayerAction subBuilder = new global::PlayerAction();
          if (bodyCase_ == BodyOneofCase.PlayerAction) {
            subBuilder.MergeFrom(PlayerAction);
          }
          input.ReadMessage(subBuilder);
          PlayerAction = subBuilder;
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
